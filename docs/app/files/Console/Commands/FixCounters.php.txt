<?php

namespace App\Console\Commands;

use App\Events\BidderAccepted;
use App\Events\BidderCreated;
use App\Events\CandidateCreated;
use App\Events\EnrollmentAccepted;
use App\Events\EnrollmentCreated;
use App\Events\OpportunityCreated;
use App\Events\UserRegistered;
use App\TuChance\Models\Bidder;
use App\TuChance\Models\Candidate;
use App\TuChance\Models\Enrollment;
use App\TuChance\Models\Opportunity;
use App\TuChance\Models\User;
use Illuminate\Console\Command;

class FixCounters extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'tuchance:fix:counters {--opportunities} ' .
    '{--users} {--enrollments} {--candidates} {--bidders}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Command description';

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        if ($this->option('opportunities')) {
            (new Opportunity)->all()
                ->each(function ($opportunity) {
                    event(new OpportunityCreated($opportunity));
                    $this->info("Updated for Opportunity: {$opportunity->id}");
                });
        }

        if ($this->option('enrollments')) {
            (new Enrollment)->withTrashed()
                ->get()
                ->each(function ($enrollment) {
                    event(new EnrollmentCreated($enrollment));

                    if ($enrollment->is_accepted) {
                        event(new EnrollmentAccepted($enrollment));
                    }

                    $this->info("Updated for Enrollment: {$enrollment->id}");
                });
        }

        if ($this->option('bidders')) {
            (new Bidder)->all()
                ->each(function ($bidder) {
                    event(new BidderCreated($bidder));

                    if ($bidder->is_active) {
                        event(new BidderAccepted($bidder));
                    }

                    $this->info("Updated for Bidder: {$bidder->id}");
                });
        }

        if ($this->option('candidates')) {
            (new Candidate)->all()
                ->each(function ($candidate) {
                    event(new CandidateCreated($candidate));

                    $this->info("Updated for Candidate: {$candidate->id}");
                });
        }

        if ($this->option('users')) {
            (new User)->groupBy('country_id')
                ->select('country_id')
                ->get()
                ->each(function ($user) {
                    event(new UserRegistered($user));
                    $this->info("Updated for User: {$user->id}");
                });
        }
    }
}

