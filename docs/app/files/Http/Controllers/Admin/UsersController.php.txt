<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Http\Requests\Admin\Users\CreateRequest;
use App\Http\Requests\Admin\Users\UpdateRequest;
use App\Http\Resources\UserResource;
use App\TuChance\Models\User;
use Illuminate\Http\Request;

class UsersController extends Controller
{
    /**
     * User model
     * @var \App\TuChance\Models\User
     */
    protected $users;

    /**
     * Relations to load for a given resource
     * @var array
     */
    protected $relations = [
        'avatar', 'country', 'state', 'city', 'tags', 'roles',
    ];

    /**
     * Create a new controller instance
     * @param  \App\TuChance\Models\User $users
     * @return void
     */
    public function __construct(User $users)
    {
        $this->users = $users;
    }

    /**
     * Display a listing of the resource.
     * @param  \Illuminate\Http\Request  $request
     * @return \App\Http\Resources\ResourceCollection
     */
    public function index(Request $request)
    {
        $query = $this->users
            ->role(['admin'])
            ->with($this->relations);

        if ($request->has('term')) {
            $query->search($request->get('term'), null, true, true);
        } else {
            $query->latest();
        }

        $users = $query->paginate(10);

        return UserResource::collection($users);
    }

    /**
     * Store a newly created resource in storage.
     * @param  \App\Http\Requests\Admin\Users\CreateRequest  $request
     * @return \App\Http\Resources\UserResource
     */
    public function store(CreateRequest $request)
    {
        $user = $this->users->newInstance();
        $user->fill($request->all());
        $user->password = bcrypt($request->get('password'));
        $user->save();

        $user->syncRoles([$request->get('role')]);

        $this->cropImage($user, 'avatar', $request);

        return new UserResource($user->fresh($this->relations));
    }

    /**
     * Display the specified resource.
     * @param  \Illuminate\Http\Request  $request
     * @param  int                       $id
     * @return \App\Http\Resources\UserResource
     */
    public function show(Request $request, $id)
    {
        $user = $this->users
            ->role(['admin'])
            ->with($this->relations)
            ->findOrFail($id);
        return new UserResource($user);
    }

    /**
     * Update the specified resource in storage.
     * @param  \App\Http\Requests\Admin\Users\UpdateRequest  $request
     * @param  int                                             $id
     * @return \App\Http\Resources\UserResource
     */
    public function update(UpdateRequest $request, $id)
    {
        $user = $this->users
            ->role(['admin'])
            ->with($this->relations)
            ->findOrFail($id);

        $user->fill($request->all());

        if ($request->has('password')) {
            $user->password = bcrypt($request->get('password'));
        }

        $user->save();

        $user->syncRoles([$request->get('role')]);

        $this->cropImage($user, 'avatar', $request);

        return new UserResource($user->fresh($this->relations));
    }

    /**
     * Remove the specified resource from storage.
     * @param  \Illuminate\Http\Request  $request
     * @param  int                       $id
     * @return \App\Http\Resources\UserResource
     */
    public function destroy(Request $request, $id)
    {
        $user = $this->users
            ->role(['admin'])
            ->with($this->relations)
            ->findOrFail($id);
        $user->delete();
        return new UserResource($user);
    }

    /**
     * Toggle resource visibility
     * @param  \Illuminate\Http\Request $request
     * @param  int                      $id
     * @return \App\Http\Resources\CategoryResource
     */
    public function toggle(Request $request, $id)
    {
        $user = $this->users
            ->role(['admin'])
            ->findOrFail($id);

        $user->is_active = !$user->is_active;
        $user->timestamps  = false;

        $user->save();

        return new UserResource($user->fresh($this->relations));
    }
}

